// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  firstname        String
  lastname         String
  description      String?
  password         String   
  isEmailConfirmed Boolean  @default(false)
  avatar           Image?   @relation(fields: [imageId], references: [id])
  imageId          String?
  role             Role     @default(USER)

  Organization             Organization[]
  UserOrganizationRelation UserOrganizationRelation[]
}

enum Role {
  USER
  OWNER
  ADMIN
}
model Site {
  id             Int                 @id @default(autoincrement())
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  name           String
  description    String?
  avatar         String?
  Images         ImageSiteRelation[]
  Schedules      Schedule[]
  Address        Address             @relation(fields: [addressId], references: [id])
  addressId      Int
  Organization   Organization?       @relation(fields: [organizationId], references: [id])
  organizationId Int?
}

model ImageSiteRelation {
  site   Site @relation(fields: [siteId], references: [id])
  siteId Int

  order Int

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  @@id([siteId, imageId])
  @@unique([siteId, order])
}

model Image {
  id                String              @id
  mimeType          String
  imageSiteRelation ImageSiteRelation[]
  User              User[]
  Organization      Organization[]
}

// TODO: better modelization of the street number (1bis, 47Ter, ...)
// TODO: check if there are better coordinate type (distance between 2 coordinates) (small prio)
model Address {
  id          Int    @id @default(autoincrement())
  houseNumber String
  streetName  String
  zipCode     Int
  city        String
  latitude    String
  longitude   String

  site Site[]
}

model Organization {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String?
  avatar      Image?   @relation(fields: [imageId], references: [id])
  imageId     String?
  links       String[]

  sites                    Site[]
  members                  User[]
  UserOrganizationRelation UserOrganizationRelation[]
}

enum OrganizationRole {
  MEMBER
  ADMIN
}

model UserOrganizationRelation {
  User   User @relation(fields: [userId], references: [id])
  userId Int

  role OrganizationRole

  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  @@id([userId, organizationId])
}

model Schedule {
  id Int @id @default(autoincrement())

  site   Site @relation(fields: [siteId], references: [id])
  siteId Int

  dayOfWeek Int // beetween 1 and 7

  open  String? // like 19:00
  close String? // like 19:30
}
