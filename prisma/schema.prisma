// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  firstname        String
  lastname         String
  description      String?
  password         String
  isEmailConfirmed Boolean  @default(false)
  avatar           Image?   @relation(fields: [imageId], references: [id])
  imageId          String?
  role             UserRole @default(USER)

  Organization             Organization[]
  UserOrganizationRelation UserOrganizationRelation[]
  sites                    UserSiteRelation[]
}

enum UserRole {
  USER
  OWNER
  ADMIN
}

model Site {
  id               Int                 @id @default(autoincrement())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  launchDate       DateTime?
  name             String
  treatedWaste     Int?
  description      String?
  isPublic         Boolean             @default(true)
  accessConditions String?
  images           ImageSiteRelation[]
  dailySchedules   DailySchedule[]
  address          Address             @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId        Int
  organization     Organization?       @relation(fields: [organizationId], references: [id])
  organizationId   Int?
  members          UserSiteRelation[]
}

model ImageSiteRelation {
  site   Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId Int

  order Int

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  @@id([siteId, imageId])
  @@unique([siteId, order])
}

model Image {
  id                String              @id
  mimeType          String
  imageSiteRelation ImageSiteRelation[]
  User              User[]
  Organization      Organization[]
}

// TODO: better modelization of the street number (1bis, 47Ter, ...)
// TODO: check if there are better coordinate type (distance between 2 coordinates) (small prio)
model Address {
  id          Int    @id @default(autoincrement())
  houseNumber String
  streetName  String
  zipCode     Int
  city        String
  latitude    Float
  longitude   Float

  site Site[]
}

model Organization {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String?
  avatar      Image?   @relation(fields: [imageId], references: [id])
  imageId     String?
  links       String[]

  sites                    Site[]
  members                  User[]
  UserOrganizationRelation UserOrganizationRelation[]
}

enum OrganizationRole {
  MEMBER
  ADMIN
}

enum SiteRole {
  MEMBER
  ADMIN
  REFEREE
}

model UserOrganizationRelation {
  User   User @relation(fields: [userId], references: [id])
  userId Int

  role OrganizationRole

  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  @@id([userId, organizationId])
}

model UserSiteRelation {
  User   User @relation(fields: [userId], references: [id])
  userId Int

  role SiteRole

  site   Site @relation(fields: [siteId], references: [id])
  siteId Int

  @@id([userId, siteId])
}

model DailySchedule {
  site   Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId Int

  // between 0 and 6. 0 is Monday
  dayOfWeek Int

  openings Opening[]

  @@id([siteId, dayOfWeek])
}

model Opening {
  // between 0 and the amount of minutes in a day (1440)
  open  Int
  // between open and the amount of minutes in a day (1440)
  // close must be > open
  close Int

  DailySchedule          DailySchedule @relation(fields: [DailyScheduleSiteId, DailyScheduleDayOfWeek], references: [siteId, dayOfWeek], onDelete: Cascade)
  DailyScheduleSiteId    Int
  DailyScheduleDayOfWeek Int

  @@id([DailyScheduleSiteId, DailyScheduleDayOfWeek, open])
}
